php là ngôn ngữ bậc cao, chạy ở server
cách thức hoạt động:
phương thức request, response từ brower đến server

            BIẾN
-Cú pháp: $ten_bien
-Ví dụ: $customer_name
-Lưu ý:
    +tên bắt đầu bằng chữ cái hoặc gạch dưới
    +tên biến chứa các chữ cái, chữ số, kí tự gạch dưới
    +Php phân biệt chữ hoa, thường
    +không cần khai báo dữ liệu
    +nên đặt tên theo quy tắc camelCase($userId)
-Debug dữ liệu: thường không show ra cho người dùng biết
    +vardump($var): trả về kiểu dữ liệu và độ dài của chuỗi, mảng.
    +print_r(): áp dụng với mảng và đối tượng

            NỐI BIẾN
-Đối với dấu nháy đơn (' ') thì khi nối biến phải có dấu chấm(.).
-Nháy đơn nhanh hơn nháy kép ('')>("") vì không cần xử lý biến và ký tự đặc biệt.
-Nên sử dụng loại nào?
   +Nên sử dụng ' (kích đơn) khi chuỗi không chứa biến hoặc ký tự đặc biệt để tăng hiệu suất.
   +Nên sử dụng " (kích kép) khi chuỗi có chứa biến hoặc ký tự đặc biệt để đảm bảo tính chính xác.
vd:
$name = 'Tien'
echo 'Nguyen Cong'.$name;
    => hiển thị: Nguyen Cong Tien
else
echo 'Nguyen Cong $name';
    => hiển thị: Nguyen Cong $name (lỗi)

-Còn đối với dấu nháy kép (" ") thì khi nối biến có thể để vào trong
-Dấu nháy cũng được và không cần nối chuỗi.
vd:
$name = 'Tien'
echo "Nguyen Cong $name ";
    => hiển thị: Nguyen Cong Tien

            HƯỚNG DẪN KHAI BÁO VÀ SỬ DỤNG HẰNG SỐ
-Hằng số là tên hoặc mã định danh không thể thay đổi trong khi thực hiện chương trình.

-Hằng số có thể được định nghĩa theo 2 cách:
    +Sử dụng hàm define().
    +Sử dụng từ khoá const.
-Khai báo: define('ten_hang', 'giá trị ');
-Có thể dùng const để khai báo hằng: const ten_hang=gia_tri;
-Sử dụng: ten_hang
-Đặt tên hằng:
    + Chứa các chữ cái, chữ số, dấu gạch dưới
    +Phân biệt chữ hoa chữ thường
    +Nên đặt tên theo quy tắc underscore nhưng viết hoa (WEB_HOST_ROOT)
    hoặc để dấu gạch phía trước
-Hằng số chỉ khai báo một lần

            CÂU LỆNH RẼ NHÁNH SWITCH-CASE
-Được dùng khi câu điều kiện có nhiều nhánh.
-Giá trị case chỉ chấp nhận: số nguyên, String, Boolean, Null, Số thực.
-Cú pháp:
    switch ($ten_bien){
        //danh sách câu lệnh
        case 'gia_tri1';
        case 'gia_tri2';
        case 'gia_tri3';
        break;
        //danh sách câu lệnh
        default://giống như else bên if vậy, hiển thị các trường hợp còn lại
        break;
    }
    
            VÒNG LẶP FOR
-Vòng lặp là đoạn mã lệnh trong đó chương trình được lặp đi lặp lại nhiều lần cho đến khi thoã đk đó
-Trong php có 4 loại vòng lặp:
    +for: lặp với số lần xác định trước.
    +while và do while: lặp với số lần lặp không xác định trước.
    +foreach: dùng để lặp các phần tử trong mảng.
-Cú pháp:
    for($ten_bien = giá trị đầu; điều kiện dừng; biểu thức tăng-giảm){
        //Câu lệnh        
    }
VD:
    for($i=0; $i<10; $i++){
        echo $i.'<br>';
    }    
            VÒNG LẶP WHILE, DO-WHILE 
-Được lặp cho đến khi điều kiện là false
-Cú pháp while: 
    while(dieu_kien_dung){
        //danh sách lệnh
    }
-Lưu ý:
    +Vòng lặp while sẽ lặp với số lần không xác định trước. Có nghĩa phải có đk thoát trong vòng lặp. 
    +Vòng lặp while có thể bị treo nếu phân xử lý thoát vòng lặp bị sai hoặc không triệt để.
    +Vòng lặp while có thế không chạy nếu không thoã mãn đk.
-Cú pháp do-while:
    do{
        //danh sách câu lệnh
    }
    while (dieu_kien_dung)
-Lưu ý:
    +Cũng giống như vòng lặp while, vòng lặp do-while sẽ lặp với số lần không xác định trước.
    +Vòng lặp do-while sẽ thực hiện câu lệnh trước, rồi mới kiểm tra đk dừng.
    +Vòng lặp do-while có thể bị treo nếu không thoã mãn đk dừng.
    +Vòng lặp do-while luôn thực hiện ít nhất 1 câu lệnh (kể cả không thoã mãn điều kiện).
            KHI NÀO DÙNG FOR, WHILE, DO-WHILE
-Tuỳ thuộc vào thói quen và kinh nghiệm của từng người.
-Dựa vào yêu cầu bài toán:
    +Nếu biết trước số lần lặp thì dùng vòng lặp for.
    +Nếu không biết trước số lần lặp thì dùng while, do-while.
            BREAK, CONTINUE, DIE, EXIT
-Break: thoát khỏi vòng lặp khi chưa kết thúc.
-Continue: nhảy qua vòng lặp kế tiếp.
-Die và exit: dừng cả chương trình phía dưới.           
            INCLUDE, INCLUDE_ONCE, REQUIRE, REQUIRE_ONCE
-4 lệnh: include, include_once, require, require_once dùng đẻ import file php khác vào php đang chạy.
=> Cú pháp chung: include 'path_to_file' hoặc include('path_to_file');
-Include: import file khác, nếu inport lỗi => các câu lệnh bên dưới vẫn chạy.
-Include_once: import file khác, chỉ import 1 lần, nếu import lỗi => các câu lệnh bên dưới vẫn chạy.
-Require: import file khác, nếu import lỗi => các câu lệnh bên dưới sẽ dừng.
-Require_once: import file khác, chỉ import 1 lần, nếu import lỗi => các câu lệnh bên dưới sẽ dừng.
            CHUỖI(STRING)
-Chuỗi là mảng bao gồm các ký tự được kết thúc bằng ký tự rỗng (null)
-Gán chuỗi cho biến: $ten_bien = 'Storm'; hoặc $ten_bien = "Storm";
-Gán chuỗi cho hằng bằng: define('_AGENCY', 'STORM'); hoặc dèine('_AGENCY', "STORM");
            NGUYÊN TẮC VỚI CHUỖI 
-Nếu chuỗi đặt trong dấu nháy kép("") thì các kí tự nháy kép phía trong chuỗi phải có kí tự escape(\) phía trước.
VD: echo "Nguyễn Công Tiến\"Storm\"-Học lập trình PHP";
-Nếu chuỗi được đặt trong dấu nháy kép mà có biến thì không cần phải nối chuỗi.
-Nếu chuỗi đặt trong dấu nháy đơn('') thì các kí tự đặt trong dấu nháy đơn phía trong chuỗi phải có kí tự escape(\) phía trước.
VD: echo 'Nguyễn Công Tiến \'STORM\'-Học lập trình PHP';
-Kết luận: trùng dấu thì phải có escape (\), nếu không phải đổi dấu, có nghĩa là dùng "" thì ở trong phải là '' và ngược lại.
            CÁC HÀM XỬ LÝ Chuỗi
-explode($delimiter, $string): hàm này sẽ chuyển 1 chuỗi $string thành 1 mảng các phần tử với kí tự tách mảng là $delimiter.
VD: $arr = explode('|', 'Lập | Trình | PHP');
-implode($delimiter, $piecesarray): hàm này sẽ nối các phần tử của mảng và các phần tử nối với nhau bởi chuỗi $delimiter.
-strlen($str): hàm này trả về độ dài của chuỗi $str.
VD: echo strlen('STORM');
-str_word_count($str): hàm này trả về số chữ trong chuỗi(không hỗ trợ tiếng Việt).
-str_repeat($str, $n): lặp chuỗi $str với $n lần.
VD: echo str_repeat('STORM', 3);
-str_replace($search, $sreplace, $string): hàm này sẽ tìm chuỗi $search và thay thế thành chuỗi $replace trong chuỗi $string.
VD: echo str_replace('-', '|','Lập-trình-PHP');
-md5($str): hàm này sẽ mã hoá MD5 chuỗi $str (32 kí tự).
VD: echo md5('123456');
-sha1($str): hàm này sẽ mã hoá sha1 chuỗi $str (40 kí tự).
VD: echo sha1('123456');
-htmlentities($str): chuyển các thẻ html sang dạng thực thể. Có nghĩa in ra màn hình sẽ hiển thị các thẻ html.
VD: echo htmlentities('<p>nguyen cong tien</p>');
-html_entity_decide($str): chuyển dạng thực thể HTML sang định dạng HTML ban đầu. Có nghĩa trình duyệt sẽ biên dịch các thẻ HTML.
VD: $str = htmlentities('<b>nguyen cong tien</b>');
    echo html_entity_decode($str);

-strip_tags($string, $allow_tags): hàm này bỏ các thẻ HTML trong chuỗi $string được khai báo ở $allow_tags (Nếu không khai báo sẽ loại bỏ tất cả thẻ).
VD: echo strip_tags('<p>nguyen cong tien</p>');
-substr($string, $start, $length): hàm này sẽ lấy chuỗi $string từ vị trí start với độ dài $length.
VD: echo substr('NguyenCongTien', 0, 2);
-strstr($string, $start str): tách một chuỗi từ kí tự cho trước $start_str cho đến hết chuỗi.
VD: echo strstr(''NguyenCongTien', 'STORM');
-strpos($str, $substr): tìm chuỗi $substr trong chuỗi $str. Nếu tìm thấy sẽ trả về số thứ tự và ngược lại trả về false.
VD: echo strpos('STORM', 't');
-substr_replace($str, $replace, $pos, $lent): hàm sẽ cắt bỏ 1 đoạn hoặc toàn bộ chuỗi và thay thế đoạn bị cắt bỏ bằng 1 chuỗi con khác.
VD: 

-strtolower($str): chuyển tất cả kí tự sang viết thường.
VD: echo strtolower('STORM');
-strtoupper($str): chuyển tất cả kí tự thành chữ hoa.
VD: echo strtoupper('storm');
-ucfirst($str): chuyển chữ cái đầu tiên sang viết hoa.
VD: echoucfirst('storm');
-lcfirst($str): chuyển chữ cái đầu tiên sang viết thường.
VD: echo lcfirst('STORM');

-ucwords($str): chuyển các kí tự đầu tiên trong chuỗi sang viết hoa.
VD: echo ucwords($str);
-$trim($str, $char): xoá kí tự ở đầu và cuối, nếu không nhập $char sẽ hiểu là kí tự trắng.
VD: echo $trim('STORM');
-json_decode($json, $is_array): chuyễn chuỗi dạng JSON thành mảng hoặc OBJECT. Nếu $is_array = true trả về dạng mảng, nếu không thành OBJECT.
-json_encode($array_or_object): chuyển array hoặc object thành JSON.

            ĐỊNH NGHĨA HÀM
-Hàm là một chương trình con thực hiện một khối công việc đc lặp đi lặp lại nhiều lần trong khi chạy chương trình.
-Hàm dùng tách một khối công việc cụ thể để chương trình đỡ phức tạp.
-Tác dụng của hàm:
    + Dễ bảo trì, quản lý.
    +Có thể tái sử dụng code.
-Cú pháp định nghĩa hàm:
    function ten_ham(danh_sach_tham_so){
        //nội dung hàm
    }
    +ten_ham: do chúng ta tự đặt(động từ).
    +danh_sach_tham_so: danh sách các biến cách nhau bởi dấu phẩy(,).
-Cú pháp gọi hàm: ten_ham(danh_sach_tham_tri).

            HÀM RETURN VÀ KHÔNG RETURN
-Hàm return(hàm có giá trị trả về): hàm có từ khoá return khi kết thúc hàm.
-Lưu ý: nếu từ khoá return đc gọi ra => các câu lệnh phía dưới không chạy nữa.
-Hàm không return: hàm không có từ khoá return.
            BIẾN CỤC BỘ, BIẾN TOÀN CỤC, BIẾN TĨNH
-Biến cục bộ: là biến đc sử dụng trong phạm vi hàm.
-Biến cục bộ không đc sử dụng bên ngoài hàm hoặc trong hàm khác.

-Biến toàn cục: là biến đc sử dụng bất kì đâu.
-Biến toàn cục đc khai báo ở ngoài hàm.
-Muốn sử dụng biến toàn cục bên trong hàm => phải khai báo bằng từ khoá global.

-Biến tĩnh: không thay đổi giá trị khi gọi hàm.