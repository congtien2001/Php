php là ngôn ngữ bậc cao, chạy ở server
cách thức hoạt động:
phương thức request, response từ brower đến server

            BIẾN
-Cú pháp: $ten_bien
-Ví dụ: $customer_name
-Lưu ý:
    +tên bắt đầu bằng chữ cái hoặc gạch dưới
    +tên biến chứa các chữ cái, chữ số, kí tự gạch dưới
    +Php phân biệt chữ hoa, thường
    +không cần khai báo dữ liệu
    +nên đặt tên theo quy tắc camelCase($userId)
-Debug dữ liệu: thường không show ra cho người dùng biết
    +vardump($var): trả về kiểu dữ liệu và độ dài của chuỗi, mảng.
    +print_r(): áp dụng với mảng và đối tượng

            NỐI BIẾN
-Đối với dấu nháy đơn (' ') thì khi nối biến phải có dấu chấm(.).
-Nháy đơn nhanh hơn nháy kép ('')>("") vì không cần xử lý biến và ký tự đặc biệt.
-Nên sử dụng loại nào?
   +Nên sử dụng ' (kích đơn) khi chuỗi không chứa biến hoặc ký tự đặc biệt để tăng hiệu suất.
   +Nên sử dụng " (kích kép) khi chuỗi có chứa biến hoặc ký tự đặc biệt để đảm bảo tính chính xác.
vd:
$name = 'Tien'
echo 'Nguyen Cong'.$name;
    => hiển thị: Nguyen Cong Tien
else
echo 'Nguyen Cong $name';
    => hiển thị: Nguyen Cong $name (lỗi)

-Còn đối với dấu nháy kép (" ") thì khi nối biến có thể để vào trong
-Dấu nháy cũng được và không cần nối chuỗi.
vd:
$name = 'Tien'
echo "Nguyen Cong $name ";
    => hiển thị: Nguyen Cong Tien

            HƯỚNG DẪN KHAI BÁO VÀ SỬ DỤNG HẰNG SỐ
-Hằng số là tên hoặc mã định danh không thể thay đổi trong khi thực hiện chương trình.

-Hằng số có thể được định nghĩa theo 2 cách:
    +Sử dụng hàm define().
    +Sử dụng từ khoá const.
-Khai báo: define('ten_hang', 'giá trị ');
-Có thể dùng const để khai báo hằng: const ten_hang=gia_tri;
-Sử dụng: ten_hang
-Đặt tên hằng:
    + Chứa các chữ cái, chữ số, dấu gạch dưới
    +Phân biệt chữ hoa chữ thường
    +Nên đặt tên theo quy tắc underscore nhưng viết hoa (WEB_HOST_ROOT)
    hoặc để dấu gạch phía trước
-Hằng số chỉ khai báo một lần

            CÂU LỆNH RẼ NHÁNH SWITCH-CASE
-Được dùng khi câu điều kiện có nhiều nhánh.
-Giá trị case chỉ chấp nhận: số nguyên, String, Boolean, Null, Số thực.
-Cú pháp:
    switch ($ten_bien){
        //danh sách câu lệnh
        case 'gia_tri1';
        case 'gia_tri2';
        case 'gia_tri3';
        break;
        //danh sách câu lệnh
        default://giống như else bên if vậy, hiển thị các trường hợp còn lại
        break;
    }
    
            VÒNG LẶP FOR
-Vòng lặp là đoạn mã lệnh trong đó chương trình được lặp đi lặp lại nhiều lần cho đến khi thoã đk đó
-Trong php có 4 loại vòng lặp:
    +for: lặp với số lần xác định trước.
    +while và do while: lặp với số lần lặp không xác định trước.
    +foreach: dùng để lặp các phần tử trong mảng.
-Cú pháp:
    for($ten_bien = giá trị đầu; điều kiện dừng; biểu thức tăng-giảm){
        //Câu lệnh        
    }
VD:
    for($i=0; $i<10; $i++){
        echo $i.'<br>';
    }    
            VÒNG LẶP WHILE, DO-WHILE 
-Được lặp cho đến khi điều kiện là false
-Cú pháp while: 
    while(dieu_kien_dung){
        //danh sách lệnh
    }
-Lưu ý:
    +Vòng lặp while sẽ lặp với số lần không xác định trước. Có nghĩa phải có đk thoát trong vòng lặp. 
    +Vòng lặp while có thể bị treo nếu phân xử lý thoát vòng lặp bị sai hoặc không triệt để.
    +Vòng lặp while có thế không chạy nếu không thoã mãn đk.
-Cú pháp do-while:
    do{
        //danh sách câu lệnh
    }
    while (dieu_kien_dung)
-Lưu ý:
    +Cũng giống như vòng lặp while, vòng lặp do-while sẽ lặp với số lần không xác định trước.
    +Vòng lặp do-while sẽ thực hiện câu lệnh trước, rồi mới kiểm tra đk dừng.
    +Vòng lặp do-while có thể bị treo nếu không thoã mãn đk dừng.
    +Vòng lặp do-while luôn thực hiện ít nhất 1 câu lệnh (kể cả không thoã mãn điều kiện).
            KHI NÀO DÙNG FOR, WHILE, DO-WHILE
-Tuỳ thuộc vào thói quen và kinh nghiệm của từng người.
-Dựa vào yêu cầu bài toán:
    +Nếu biết trước số lần lặp thì dùng vòng lặp for.
    +Nếu không biết trước số lần lặp thì dùng while, do-while.
            BREAK, CONTINUE, DIE, EXIT
-Break: thoát khỏi vòng lặp khi chưa kết thúc.
-Continue: nhảy qua vòng lặp kế tiếp.
-Die và exit: dừng cả chương trình phía dưới.           
            INCLUDE, INCLUDE_ONCE, REQUIRE, REQUIRE_ONCE
-4 lệnh: include, include_once, require, require_once dùng đẻ import file php khác vào php đang chạy.
=> Cú pháp chung: include 'path_to_file' hoặc include('path_to_file');
-Include: import file khác, nếu inport lỗi => các câu lệnh bên dưới vẫn chạy.
-Include_once: import file khác, chỉ import 1 lần, nếu import lỗi => các câu lệnh bên dưới vẫn chạy.
-Require: import file khác, nếu import lỗi => các câu lệnh bên dưới sẽ dừng.
-Require_once: import file khác, chỉ import 1 lần, nếu import lỗi => các câu lệnh bên dưới sẽ dừng.
